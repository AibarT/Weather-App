let citiesInput = document.getElementById('cities');
let button = document.getElementById('button');
let weatherCardsContainer = document.getElementById('weather-cards');
let kzb = document.getElementById("kz");
let rub = document.getElementById("ru");
let enb = document.getElementById("en");
let lang = "ru"; 

kzb.addEventListener('click', function(){
    lang = "kz"
})
rub.addEventListener('click', function(){
    lang = "ru"
})
enb.addEventListener('click', function(){
    lang = "en"
})

const translations = {
    kz: {
        placeholder: "“ö–∞–ª–∞ –∞—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑",
        button: "–¢–∞“£–¥–∞—É",
        temp: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        max: "–ú–∞–∫—Å",
        min: "–ú–∏–Ω",
        wind: "–ñ–µ–ª",
        humidity: "–´–ª“ì–∞–ª–¥—ã–ª—ã“õ",
        error: "“ö–∞–ª–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã",
        tryAgain: "–ë–∞—Å“õ–∞ “õ–∞–ª–∞ –∞—Ç—ã–Ω –µ–Ω–≥—ñ–∑—ñ–ø –∫”©—Ä—ñ“£—ñ–∑",
        kmph: "–∫–º/—Å",
        days: ['–ñ–µ–∫—Å–µ–Ω–±—ñ', '–î“Ø–π—Å–µ–Ω–±—ñ', '–°–µ–π—Å–µ–Ω–±—ñ', '–°”ô—Ä—Å–µ–Ω–±—ñ', '–ë–µ–π—Å–µ–Ω–±—ñ', '–ñ“±–º–∞', '–°–µ–Ω–±—ñ']
    },
    ru: {
        placeholder: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞",
        button: "–í—ã–±—Ä–∞—Ç—å",
        temp: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        max: "–ú–∞–∫—Å",
        min: "–ú–∏–Ω",
        wind: "–í–µ—Ç–µ—Ä",
        humidity: "–í–ª–∞–∂–Ω–æ—Å—Ç—å",
        error: "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        tryAgain: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥",
        kmph: "–∫–º/—á",
        days: ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
    },
    en: {
        placeholder: "Enter city name",
        button: "Select",
        temp: "Temp",
        max: "Max",
        min: "Min",
        wind: "Wind",
        humidity: "Humidity",
        error: "City not found",
        tryAgain: "Try another city",
        kmph: "km/h",
        days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    }
};

let swiper = new Swiper('.swiper', {
    slidesPerView: 'auto',
    spaceBetween: 10,
    centeredSlides: true,
    loop: false,
    breakpoints: {
        320: { spaceBetween: 5 },
        600: { spaceBetween: 10 }
    }
});


button.addEventListener('click', function() {
    let city = citiesInput.value.trim();
    if (!city) return;
    let userinfo = [];
    userinfo.push({city:citiesInput.value})
    localStorage.setItem('city', JSON.stringify(userinfo))
        
    fetch(`https://api.weatherapi.com/v1/forecast.json?key=0a447dc803d64e249b192310252903&q=${city}&days=3&aqi=no&alerts=no`)
        .then(response => response.json())
        .then(data => {
            updateWeatherCards(data);
            console.log(data)
        })
        .catch(err => {
            console.error("Error:", err);
            showError();
        });
});

function updateWeatherCards(data) {
    weatherCardsContainer.innerHTML = '';
        
    if (!data.forecast || !data.forecast.forecastday) {
        showError();
        return;
    }
        
    let days = data.forecast.forecastday;
        
    days.forEach((dayData, index) => {
        let date = new Date(dayData.date);
        let dayName = Day(date.getDay());
           
        let card = document.createElement('div');
        card.className = 'swiper-slide';
           
        let dayInfo = dayData.day;
        let condition = dayInfo.condition;
        let tempColor = '';
        if (dayInfo.avgtemp_c > 32) {
            tempColor = 'orange';
        } else if (dayInfo.avgtemp_c > 18) {
            tempColor = 'lightyellow';
        } else if (dayInfo.avgtemp_c > 9) {
            tempColor = 'lightblue';
        } else if(dayInfo.avgtemp_c > 0) {
            tempColor = 'blue';
        }else {
            tempColor = 'rgb(0, 0, 165)';
        }
            
        card.innerHTML = `
            <div class="weathercard">
                <div class="cityname">${data.location.name}</div>
                <div class="date">${dayName}</div>
                <img class="weathericon" src="https:${condition.icon}" alt="${condition.text}">
                <div class="weatherinfo">
                    <div>${translations[lang].temp}: <span class="temphighlight" style="color: ${tempColor}">${dayInfo.avgtemp_c}¬∞C</span></div>
                    <div>${translations[lang].max}: ${dayInfo.maxtemp_c}¬∞ | ${translations[lang].min}: ${dayInfo.mintemp_c}¬∞</div>
                    <div>${translations[lang].wind} : ${dayInfo.maxwind_kph} ${translations[lang].kmph} </div>
                    <div>${translations[lang].humidity}: ${dayInfo.avghumidity}%</div>
                </div>
                <div class="astrocontainer">
                    <div class="suntimes">
                        <div class="sunevent">
                            <span class="icon">üåÖ</span>
                            <span class="time">${dayData.astro.sunrise}</span>
                        </div>
                        <div class="sunevent">
                            <span class="icon">üåá</span>
                            <span class="time">${dayData.astro.sunset}</span>
                        </div>
                    </div>
                    <div class="moonphase">
                        <div class="moonicon">${getMoonIcon(dayData.astro.moon_phase).icon}</div>
                        <div class="moontext">${getMoonIcon(dayData.astro.moon_phase)[lang]}</div>
                    </div>
                </div>
            </div>
        `;
            
        weatherCardsContainer.appendChild(card);
    });
        
    swiper.update();
}

function showError() {
    weatherCardsContainer.innerHTML = `
        <div class="swiper-slide">
            <div class="weathercard">
                <div class="errormessage">“ö–∞–ª–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã</div>
                <img class="weathericon" src="https://cdn-icons-png.flaticon.com/512/564/564619.png" alt="Error">
                <div>–ë–∞—Å“õ–∞ “õ–∞–ª–∞ –∞—Ç—ã–Ω –µ–Ω–≥—ñ–∑—ñ–ø –∫”©—Ä—ñ“£—ñ–∑</div>
            </div>
        </div>
    `;}
    swiper.update();

function Day(dayIndex) {
    let days = translations[lang].days;
return days[dayIndex];}

function getMoonIcon(phase) {
    const phases = {
        "New Moon": {icon: "üåë", kz: "–ñ–∞“£–∞ –ê–π", ru: "–ù–æ–≤–æ–ª—É–Ω–∏–µ", en: "New Moon" },
        "Waxing Crescent": {icon: "üåí", kz: "“ö–∞—Ä–∞ –ê–π", ru: "–ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞", en: "Waxing Crescent" },
        "First Quarter": {icon: "üåì", kz: "–ê–π–¥—ã“£ –±—ñ—Ä—ñ–Ω—à—ñ —à–∏—Ä–µ–≥—ñ", ru: "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å", en: "First Quarter"},
        "Waxing Gibbous": {icon: "üåî", kz: "“Æ–ª–∫–µ–π–≥–µ–Ω –ê–π", ru: "–ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞", en: "Waxing Gibbous"},
        "Full Moon": {icon: "üåï", kz: "–¢–æ–ª—ã“õ –ê–π", ru: "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ", en: "Full Moon"},
        "Waning Gibbous": {icon: "üåñ", kz: "–ö—ñ—à—ñ—Ä–µ–π–≥–µ–Ω –ê–π", ru: "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞", en: "Waning Gibbous"},
        "Last Quarter": {icon: "üåó", kz: "–ê–π–¥—ã“£ —Å–æ“£“ì—ã —à–∏—Ä–µ–≥—ñ", ru: "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å", en: "Last Quarter"},
        "Waning Crescent": {icon: "üåò", kz: "–ö—ñ—à–∫–µ–Ω–µ –ê–π", ru: "–°—Ç–∞—Ä–∞—è –ª—É–Ω–∞", en: "Waning Crescent"}
    };

    return phases[phase] || {icon: "üåô", kz: "–ê–π", ru: "–õ—É–Ω–∞"};
}